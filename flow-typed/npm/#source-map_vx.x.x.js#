// flow-typed signature: 36b5a181ae05a516a711d68a54030532
// flow-typed version: <<STUB>>/source-map_v^0.5.6/flow_v0.76.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'source-map'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'source-map' {
    // Type definitions for source-map 0.7
    // Project: https://github.com/mozilla/source-map
    // Definitions by: Morten Houston Ludvigsen <https://github.com/MortenHoustonLudvigsen>,
    //                 Ron Buckton <https://github.com/rbuckton>,
    //                 John Vilk <https://github.com/jvilk>
    // Definitions: https://github.com/mozilla/source-map
    export type SourceMapUrl = string;

    export interface StartOfSourceMap {
        file?: string;
        sourceRoot?: string;
        skipValidation?: boolean;
    }

    export interface RawSourceMap {
        version: number;
        sources: string[];
        names: string[];
        sourceRoot?: string;
        sourcesContent?: string[];
        mappings: string;
        file: string;
    }

    export interface RawIndexMap extends StartOfSourceMap {
        version: number;
        sections: RawSection[];
    }

    export interface RawSection {
        offset: Position;
        map: RawSourceMap;
    }

    export interface Position {
        line: number;
        column: number;
    }

    export interface NullablePosition {
        line: number | null;
        column: number | null;
        lastColumn: number | null;
    }

    export interface MappedPosition {
        source: string;
        line: number;
        column: number;
        name?: string;
    }

    export interface NullableMappedPosition {
        source: string | null;
        line: number | null;
        column: number | null;
        name: string | null;
    }

    export interface MappingItem {
        source: string;
        generatedLine: number;
        generatedColumn: number;
        originalLine: number;
        originalColumn: number;
        name: string;
    }

    export interface Mapping {
        generated: Position;
        original: Position;
        source: string;
        name?: string;
    }

    export interface CodeWithSourceMap {
        code: string;
        map: SourceMapGenerator;
    }

    export interface SourceMapConsumer {
        /**
         * Compute the last column for each generated mapping. The last column is
         * inclusive.
         */
        computeColumnSpans(): void;

        /**
         * Returns the original source, line, and column information for the generated
         * source's line and column positions provided. The only argument is an object
         * with the following properties:
         *
         *   - line: The line number in the generated source.
         *   - column: The column number in the generated source.
         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
         *
         * and an object is returned with the following properties:
         *
         *   - source: The original source file, or null.
         *   - line: The line number in the original source, or null.
         *   - column: The column number in the original source, or null.
         *   - name: The original identifier, or null.
         */
        originalPositionFor(generatedPosition: Position & { bias?: number }): NullableMappedPosition;

        /**
         * Returns the generated line and column information for the original source,
         * line, and column positions provided. The only argument is an object with
         * the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.
         *   - column: The column number in the original source.
         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
         *
         * and an object is returned with the following properties:
         *
         *   - line: The line number in the generated source, or null.
         *   - column: The column number in the generated source, or null.
         */
        generatedPositionFor(originalPosition: MappedPosition & { bias?: number }): NullablePosition;

        /**
         * Returns all generated line and column information for the original source,
         * line, and column provided. If no column is provided, returns all mappings
         * corresponding to a either the line we are searching for or the next
         * closest line that has any mappings. Otherwise, returns all mappings
         * corresponding to the given line and either the column we are searching for
         * or the next closest column that has any offsets.
         *
         * The only argument is an object with the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.
         *   - column: Optional. the column number in the original source.
nalPosition: MappedPosition): NullablePosition[];

/**
* Return true if we have the source content for every source in the source
* map, false nt to
*        iterate over the mappings sorted by the generated file's line/column
*        order or the original's source/line/column order, respectively. Defaults to
*        `Sourring, sourceMapUrl?: SourceMapUrl): Promise<BasicSourceMapConsumer | IndexedSopConsumer.with(
*   myRawSourceMap,
*   null,
*   async function (consumer) {
*     // Use `consumer` inside here and don't worry about remembering
*     // to call `destroy`.
*
*     const x = await whatever(consumer);
    (rawSourceMap: RawSourceMap | string): Promise<BasicSourceMapConsumer>;

    /**
    * Create a BasicSourceMapConsumer from a SourceMapGenSourceMapConsumer): SourceMapGenerator;

    /**
    * Add a single mapping from original source line and column to the generated
    *  the minimium of this map and the supplied map.
    *
    * @param sourceMapConsumer The source map to be applied.
    * @param sourceFile Optional. The filename of the source file.
    *        If omitted, SourceMapConsumer's file property will be used.
    * @param sourceMapPath Optional. The dirname of the path to the source map
    *        t;
    name: string;

    constructor();
    constructor(
        line: number | null,
        column: number | null,
        source: string | null,
        chunks?: Array<(string | SourceNode)> | SourceNode | string,
        name?: string
    );

    static fromStringWithSourceMap(
        code: string,
        sourceMapConsumer: SourceMapConsumer,
        relativePath?: string
    ): SourceNode;

    add(chunk: Array<(string | SourceNode)> | SourceNode | string): SourceNode;

    prepend(chunk: Array<(string | SourceNode)> | SourceNode | string): SourceNode;

    setSourceContent(sourceFile: string, sourceContent: string): void;

    walk(fn: (chunk: string, mapping: MappedPosition) => void): void;

    walkSourceContents(fn: (file: string, content: string) => void): void;

    join(sep: string): SourceNode;

    replaceRight(pattern: string, replacement: string): SourceNode;

    toString(): string;

    toStringWithSourceMap(startOfSourceMap?: StartOfSourceMap): CodeWithSourceMap;
  }
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'source-map/dist/source-map.debug' {
  declare module.exports: any;
}

declare module 'source-map/dist/source-map' {
  declare module.exports: any;
}

declare module 'source-map/dist/source-map.min' {
  declare module.exports: any;
}

declare module 'source-map/lib/array-set' {
  declare module.exports: any;
}

declare module 'source-map/lib/base64-vlq' {
  declare module.exports: any;
}

declare module 'source-map/lib/base64' {
  declare module.exports: any;
}

declare module 'source-map/lib/binary-search' {
  declare module.exports: any;
}

declare module 'source-map/lib/mapping-list' {
  declare module.exports: any;
}

declare module 'source-map/lib/quick-sort' {
  declare module.exports: any;
}

declare module 'source-map/lib/source-map-consumer' {
  declare module.exports: any;
}

declare module 'source-map/lib/source-map-generator' {
  declare module.exports: any;
}

declare module 'source-map/lib/source-node' {
  declare module.exports: any;
}

declare module 'source-map/lib/util' {
  declare module.exports: any;
}

declare module 'source-map/source-map' {
  declare module.exports: any;
}

// Filename aliases
declare module 'source-map/dist/source-map.debug.js' {
  declare module.exports: $Exports<'source-map/dist/source-map.debug'>;
}
declare module 'source-map/dist/source-map.js' {
  declare module.exports: $Exports<'source-map/dist/source-map'>;
}
declare module 'source-map/dist/source-map.min.js' {
  declare module.exports: $Exports<'source-map/dist/source-map.min'>;
}
declare module 'source-map/lib/array-set.js' {
  declare module.exports: $Exports<'source-map/lib/array-set'>;
}
declare module 'source-map/lib/base64-vlq.js' {
  declare module.exports: $Exports<'source-map/lib/base64-vlq'>;
}
declare module 'source-map/lib/base64.js' {
  declare module.exports: $Exports<'source-map/lib/base64'>;
}
declare module 'source-map/lib/binary-search.js' {
  declare module.exports: $Exports<'source-map/lib/binary-search'>;
}
declare module 'source-map/lib/mapping-list.js' {
  declare module.exports: $Exports<'source-map/lib/mapping-list'>;
}
declare module 'source-map/lib/quick-sort.js' {
  declare module.exports: $Exports<'source-map/lib/quick-sort'>;
}
declare module 'source-map/lib/source-map-consumer.js' {
  declare module.exports: $Exports<'source-map/lib/source-map-consumer'>;
}
declare module 'source-map/lib/source-map-generator.js' {
  declare module.exports: $Exports<'source-map/lib/source-map-generator'>;
}
declare module 'source-map/lib/source-node.js' {
  declare module.exports: $Exports<'source-map/lib/source-node'>;
}
declare module 'source-map/lib/util.js' {
  declare module.exports: $Exports<'source-map/lib/util'>;
}
declare module 'source-map/source-map.js' {
  declare module.exports: $Exports<'source-map/source-map'>;
}
